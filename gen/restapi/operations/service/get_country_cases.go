// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetCountryCasesHandlerFunc turns a function with the right signature into a get country cases handler
type GetCountryCasesHandlerFunc func(GetCountryCasesParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetCountryCasesHandlerFunc) Handle(params GetCountryCasesParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetCountryCasesHandler interface for that can handle valid get country cases params
type GetCountryCasesHandler interface {
	Handle(GetCountryCasesParams, interface{}) middleware.Responder
}

// NewGetCountryCases creates a new http.Handler for the get country cases operation
func NewGetCountryCases(ctx *middleware.Context, handler GetCountryCasesHandler) *GetCountryCases {
	return &GetCountryCases{Context: ctx, Handler: handler}
}

/* GetCountryCases swagger:route GET /country-cases service getCountryCases

retrieve all covid cases for country

*/
type GetCountryCases struct {
	Context *middleware.Context
	Handler GetCountryCasesHandler
}

func (o *GetCountryCases) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetCountryCasesParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
