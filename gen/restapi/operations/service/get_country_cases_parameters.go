// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewGetCountryCasesParams creates a new GetCountryCasesParams object
//
// There are no default values defined in the spec.
func NewGetCountryCasesParams() GetCountryCasesParams {

	return GetCountryCasesParams{}
}

// GetCountryCasesParams contains all the bound params for the get country cases operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetCountryCases
type GetCountryCasesParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: query
	*/
	CountryName *string
	/*
	  Pattern: ^\d{1,2}\/\d{1,2}\/\d{2}$
	  In: query
	*/
	DateFrom *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetCountryCasesParams() beforehand.
func (o *GetCountryCasesParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qCountryName, qhkCountryName, _ := qs.GetOK("country_name")
	if err := o.bindCountryName(qCountryName, qhkCountryName, route.Formats); err != nil {
		res = append(res, err)
	}

	qDateFrom, qhkDateFrom, _ := qs.GetOK("date_from")
	if err := o.bindDateFrom(qDateFrom, qhkDateFrom, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindCountryName binds and validates parameter CountryName from query.
func (o *GetCountryCasesParams) bindCountryName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.CountryName = &raw

	return nil
}

// bindDateFrom binds and validates parameter DateFrom from query.
func (o *GetCountryCasesParams) bindDateFrom(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.DateFrom = &raw

	if err := o.validateDateFrom(formats); err != nil {
		return err
	}

	return nil
}

// validateDateFrom carries on validations for parameter DateFrom
func (o *GetCountryCasesParams) validateDateFrom(formats strfmt.Registry) error {

	if err := validate.Pattern("date_from", "query", *o.DateFrom, `^\d{1,2}\/\d{1,2}\/\d{2}$`); err != nil {
		return err
	}

	return nil
}
