// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetAllCasesHandlerFunc turns a function with the right signature into a get all cases handler
type GetAllCasesHandlerFunc func(GetAllCasesParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAllCasesHandlerFunc) Handle(params GetAllCasesParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetAllCasesHandler interface for that can handle valid get all cases params
type GetAllCasesHandler interface {
	Handle(GetAllCasesParams, interface{}) middleware.Responder
}

// NewGetAllCases creates a new http.Handler for the get all cases operation
func NewGetAllCases(ctx *middleware.Context, handler GetAllCasesHandler) *GetAllCases {
	return &GetAllCases{Context: ctx, Handler: handler}
}

/* GetAllCases swagger:route GET /all-cases service getAllCases

retrieve all covid cases reported today

*/
type GetAllCases struct {
	Context *middleware.Context
	Handler GetAllCasesHandler
}

func (o *GetAllCases) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetAllCasesParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetAllCasesOKBody get all cases o k body
//
// swagger:model GetAllCasesOKBody
type GetAllCasesOKBody struct {

	// today date
	// Required: true
	TodayDate *string `json:"today_date"`

	// total cases
	// Required: true
	TotalCases *string `json:"total_cases"`
}

// Validate validates this get all cases o k body
func (o *GetAllCasesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTodayDate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTotalCases(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllCasesOKBody) validateTodayDate(formats strfmt.Registry) error {

	if err := validate.Required("getAllCasesOK"+"."+"today_date", "body", o.TodayDate); err != nil {
		return err
	}

	return nil
}

func (o *GetAllCasesOKBody) validateTotalCases(formats strfmt.Registry) error {

	if err := validate.Required("getAllCasesOK"+"."+"total_cases", "body", o.TotalCases); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get all cases o k body based on context it is used
func (o *GetAllCasesOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllCasesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllCasesOKBody) UnmarshalBinary(b []byte) error {
	var res GetAllCasesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
